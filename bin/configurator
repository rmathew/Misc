#!/bin/bash
#
# configurator: A simple shell-script to help configure and build various
# packages on Linux from their respective sources.
#
# Tips:
#   1. Use `time make -O -j2` or `time ninja -j2` to build.
#   2. Use `make install-strip` or `ninja install/strip` to install.
set -euo pipefail

NAME="generic_autotools"
SOURCE="${PWD}"
PREFIX="/usr"
SYSCONF="/etc"

CMAKE="${CMAKE:-/usr/bin/cmake}"
MESON="${MESON:-/usr/bin/meson}"

#
# Helper functions.
#

usage() {
    echo "Usage: ${0} [-n name] [-p prefix] [-s source] [-c sysconfig] \\"
    echo "  [-- passthrough arguments]"
    exit 1
}

chk_configure() {
    if [[ ! -x "${SOURCE}/configure" ]]; then
        echo "ERROR: Missing \"configure\" script in \"${SOURCE}\"."
        exit 1
    fi
}

chk_cmake() {
    if [[ ! -x "${CMAKE}" ]]; then
        echo "ERROR: Unable to execute \"${CMAKE}\"."
        exit 1
    fi
}

chk_cmake_lists() {
    if [[ ! -r "${PWD}/CMakeLists.txt" ]]; then
        echo "ERROR: Missing \"CMakeLists.txt\" script in \"${PWD}\"."
        exit 1
    fi
}

chk_meson() {
    if [[ ! -x "${MESON}" ]]; then
        echo "ERROR: Unable to execute \"${MESON}\"."
        exit 1
    fi
}

chk_meson_build() {
    if [[ ! -r "${PWD}/meson.build" ]]; then
        echo "ERROR: Missing \"meson.build\" script in \"${PWD}\"."
        exit 1
    fi
}

#
# Recipes.
#

# binutils-2.37
#
# NOTE:
#   1. Requires out-of-source builds.
#   2. Apply the patch from:
#      https://www.linuxfromscratch.org/patches/downloads/binutils/binutils-2.37-upstream_fix-1.patch
#      first.
#   3. Fix the empty man-pages issue by running:
#        sed -i '63d' etc/texi2pod.pl && find -name \*.1 -delete
cfg_binutils() {
    chk_configure
    (set -x; mkdir -p build && cd build && "${SOURCE}/configure" \
        --prefix="${PREFIX}" --disable-static --enable-shared --enable-lto \
        --enable-gold --enable-ld=default --enable-plugins --with-system-zlib \
        --enable-64-bit-bfd --disable-werror --disable-debug --disable-nls \
        "$@")
}

# cairo 1.16.0
cfg_cairo() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --enable-gl --enable-xlib-xcb --enable-tee "$@")
}

# dbus-1.12.20
cfg_dbus() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --disable-debug --disable-xml-docs --disable-doxygen-docs \
        --disable-ducktype-docs --disable-selinux --enable-inotify \
        --disable-tests --disable-installed-tests --disable-code-coverage "$@")
}

# freetype-2.11.0
#
# NOTE: FreeType2 and HarfBuzz have a weird inter-dependency. So:
#   1. Install FreeType2 without enabling HarfBuzz first (--with-harfbuzz=no).
#   2. Install HarfBuzz to use FreeType2 (-Dfreetype=enabled).
#   3. Reinstall FreeType2 with HarfBuzz enabled (--with-harfbuzz=yes).
cfg_freetype() {
    chk_configure
    # Enable table-validations for TrueType and OpenType.
    cd "${SOURCE}" && \
        sed -i.orig -r 's/.*(AUX_MODULES.*valid)/\1/' modules.cfg
    # Enable sub-pixel rendering for LCD displays.
    cd "${SOURCE}" && \
        sed -i.orig -r 's/.*(#.*FT_CONFIG_OPTION_SUBPIXEL_RENDERING) .*/\1/' \
            include/freetype/config/ftoption.h
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --enable-freetype-config --with-zlib=yes --with-bzip2=yes \
        --with-png=yes "$@")
}

# ffmpeg-4.3.2
#
# NOTE:
#   1. Install a bunch of other libraries first, depending on your needs. See:
#        https://www.linuxfromscratch.org/blfs/view/svn/multimedia/libdriv.html
#        https://trac.ffmpeg.org/wiki/CompilationGuide/Generic
#        https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
#      for some pointers.
cfg_ffmpeg() {
    chk_configure
    FFM_PREFIX="/opt/mm"
    (set -x; PKG_CONFIG_PATH="${FFM_PREFIX}/lib/pkgconfig:/usr/lib/pkgconfig" \
        "${SOURCE}/configure" --prefix="${FFM_PREFIX}" --disable-debug \
        --enable-shared --disable-static --disable-doc --disable-htmlpages \
        --enable-gpl --enable-version3 --enable-nonfree --disable-encoders \
        --enable-postproc --enable-avfilter --enable-swresample \
        --enable-swscale --enable-libfontconfig --enable-libfreetype \
        --enable-libfribidi --disable-iconv --enable-zlib --enable-bzlib \
        --enable-libopenjpeg --cpu=pentium3 --enable-sse --enable-asm \
        --x86asmexe=nasm --enable-optimizations --enable-stripping \
        --enable-libfdk-aac --enable-libdav1d --enable-libvpx \
        --enable-libx264 --enable-libx265 --enable-librsvg \
        --extra-cflags="-I${FFM_PREFIX}/include" \
        --extra-cxxflags="-I${FFM_PREFIX}/include" \
        --extra-libs="-L${FFM_PREFIX}/lib" \
        "$@")
}

# gcc-9.4.0
cfg_gcc() {
    chk_configure
    CPU="pentium3"
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --enable-languages=c,c++ --target="i686-pc-linux-gnu" \
        --with-arch="${CPU}" --with-cpu="${CPU}" --with-tune="${CPU}" \
        --enable-threads=posix --enable-__cxa_atexit --disable-checking \
        --disable-static --enable-shared --with-system-zlib --disable-debug \
        --disable-nls "$@")
}

# gcc-4.8.5
#
# NOTE:
#   1. Used for reliably compiling linux-3.19.8.
#   2. Requires out-of-source builds.
#   3. Apply the patch from:
#        https://gcc.gnu.org/legacy-ml/gcc-patches/2015-08/msg00375.html
#      for being able to compile with newer versions of gperf.
cfg_gcc_legacy() {
    chk_configure
    CPU="pentium3"
    (set -x; mkdir -p build && cd build && "${SOURCE}/configure" \
        --prefix="/opt/gcc485" --enable-languages=c,c++ --disable-multilib \
        --target="i686-pc-linux-gnu" --disable-bootstrap \
        --with-arch="${CPU}" --with-cpu="${CPU}" --with-tune="${CPU}" \
        --enable-threads=posix --enable-__cxa_atexit --disable-checking \
        --disable-static --enable-shared --with-system-zlib --disable-debug \
        --disable-nls "$@")
}

cfg_generic_autotools() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --disable-debug --disable-nls "$@")
}

cfg_generic_cmake() {
    chk_cmake
    chk_cmake_lists
    mkdir -p build && cd build && \
        "${CMAKE}" -G "Ninja" -DCMAKE_INSTALL_PREFIX="${PREFIX}" \
            -DCMAKE_INSTALL_SYSCONFDIR="${SYSCONF}" \
            -DCMAKE_BUILD_TYPE="Release" -DBUILD_SHARED_LIBS="ON" \
            -DBUILD_STATIC_LIBS="OFF" "$@" "${SOURCE}"
}

cfg_generic_meson() {
    chk_meson
    chk_meson_build
    mkdir -p build && cd build && \
        "${MESON}" --prefix="${PREFIX}" --sysconfdir="/etc" \
            --buildtype=release --default-library=shared --strip "$@"
}

# git-2.32.0
#
# NOTE:
#   1. Separately download and keep git-manpages-XYZ.tar.xz in "..".
#   2. This recipe actually configures *and* installs Git.
cfg_git() {
    chk_configure
    GIT_PREFIX="/opt/git"
    if [[ -d "${GIT_PREFIX}" ]]; then
      echo "ERROR: \"${GIT_PREFIX}\" exists - move it aside first."
      exit 1
    fi
    # NOTE: "make install-man" fails as of git-2.1.3 with XML-validation errors.
    # Directly extract man-pages from a separately-downloaded archive.
    MANTAR=$(find .. -maxdepth 1 -name git-manpages*tar* -print)
    if [[ -z "${MANTAR}" ]]; then
      echo "ERROR: Could not locate the TAR of man-pages for Git."
      exit 1
    fi

    (set -x; "${SOURCE}/configure" --prefix="${GIT_PREFIX}" \
        --with-libpcre2 --with-python="/usr/bin/python3" \
        --with-shell="/bin/bash" --with-editor="/usr/bin/vim" \
        --with-pager="/usr/bin/less" --without-tcltk "$@")
    if [[ "${?}" != "0" ]]; then
      echo "ERROR: \"configure\" failed."
      exit 1
    fi

    read -p "INFO: Ready to compile Git..." unused_1 && time make
    if [[ "${?}" != "0" ]]; then
      echo "ERROR: \"make\" failed."
      exit 1
    fi

    read -p "INFO: Ready to install Git to \"${GIT_PREFIX}..." unused_2 && \
        sudo make install
    if [[ "${?}" != "0" ]]; then
      echo "ERROR: \"make install\" failed."
      exit 1
    fi
    echo "INFO: Stripping installed binaries..."
    find "${GIT_PREFIX}" -type d -exec sudo "${HOME}/bin/maybe_strip" \{\} \;

    echo "INFO: Extracting man-pages for Git..."
    if [[ ! -d "${GIT_PREFIX}/share/man" ]]; then
        echo "INFO: Creating directory "${GIT_PREFIX}/share/man"."
        sudo mkdir -p "${GIT_PREFIX}/share/man"
    fi
    sudo tar -C "${GIT_PREFIX}/share/man" -xf "${MANTAR}"

    echo "INFO: Done. Git installed in \"${GIT_PREFIX}\"."
}

# glibc-2.33
#
# WARNING:
#   a. glibc-2.34 breaks in-place upgrade, leaving libpthread with dangling-
#      references to no-longer-exported GLIBC_PRIVATE symbols in libc.so..
#   b. This version of GCC clamps the minimum kernel-version to 3.2.0; use
#      glibc-2.25 or lower for use with kernel 2.6.32+.
#
# NOTE:
#   1. Ensure Python3 is in the PATH while building.
#   2. Requires out-of-source builds.
#   3. The "/usr" prefix is needed for glibc on Linux.
#   4. Do not install without running `make check` first.
#   5. We need the autoconf cache-overrides due to:
#        https://sourceware.org/bugzilla/show_bug.cgi?id=27318
#      and then:
#        https://bugs.gentoo.org/785091
#      exposed by the workaround for the first. Ugh.
#   6. Ensure that you apply the patch from:
#        https://sourceware.org/bugzilla/show_bug.cgi?id=21911
#      before you execute `make install`.
cfg_glibc() {
    chk_configure
    (set -x; mkdir -p build && cd build && "${SOURCE}/configure" \
        --prefix="/usr" --sysconfdir="${SYSCONF}" --enable-shared \
        --disable-werror --enable-kernel="2.6.39.4" \
        --with-headers="/usr/src/headers-5.14.12/include" \
        libc_cv_include_x86_isa_level=no libc_cv_have_x86_lahf_sahf=no \
        libc_cv_have_x86_movbe=no "$@")
}

# glibc-2.25
#
# NOTE:
#   1. This is the last version of glibc that supports Linux Kernel v2.6.32.
#   2. Ensure that you apply the patch from
#        https://sourceware.org/bugzilla/show_bug.cgi?id=21661
#      before you build this.
cfg_glibc_legacy() {
    chk_configure
    (set -x; mkdir -p build && cd build && "${SOURCE}/configure" \
        --prefix="/usr" --sysconfdir="${SYSCONF}" --enable-shared \
        --disable-werror --enable-kernel="2.6.39.4" \
        --with-headers="/usr/src/headers-5.14.12/include" "$@")
}

# go-1.15.15
#
# NOTE:
#   1. This is the last version of Go that supports floating-point arithmetic
#      in hardware on the Pentium 3 CPU:
#        https://golang.org/doc/go1.15#386
#   2. Rename the existing installation of Go to /opt/OLD_go first and then
#      extract the Go source-code into "/opt/go" with write-access for ${USER}.
cfg_go() {
    if [[ ! -f "${PWD}/src/all.bash" ]]; then
        echo "ERROR: \"./src/all.bash\" not found; not in Go source-directory."
        exit 1
    fi
    if [[ ! -d "/opt/OLD_go" ]]; then
        echo "ERROR: \"/opt/OLD_go\" not found for bootstrapping Go."
        exit 1
    fi
    export GOROOT_BOOTSTRAP="/opt/OLD_go"
    export GOROOT="/opt/go"
    export GOOS="linux"
    export GOARCH="386"
    export GO386="387"
    # This helps reduce the time-outs in tests on slower hardware.
    export GO_TEST_TIMEOUT_SCALE="10"
    export CC="/usr/bin/gcc"
    export CFLAGS="-march=pentium3 -msse -pipe -g0 -O2 -fomit-frame-pointer"

    cd src && ./all.bash
}

# harfbuzz-2.8.2
#
# NOTE: Install FreeType2 first and then reinstall it after installing HarfBuzz
# (see the note for cfg_freetype).
cfg_harfbuzz() {
    chk_meson
    chk_meson_build
    mkdir -p build && cd build && \
        "${MESON}" --prefix="${PREFIX}" --sysconfdir="/etc" \
            --buildtype=release --default-library=shared --strip \
            -Dfreetype=enabled -Dgraphite=enabled -Dtests=disabled \
            -Ddocs=disabled
}

# libdrm-2.4.107
cfg_libdrm() {
    chk_meson
    chk_meson_build
    mkdir -p build && cd build && \
        "${MESON}" --prefix="${PREFIX}" --sysconfdir="/etc" \
            --buildtype=release --default-library=shared --strip \
            -Dintel="false" -Dradeon="false" -Damdgpu="false" -Dnouveau="true" \
            -Dvmwgfx="false" -Domap="false" -Dexynos="false" \
            -Dfreedreno="false" -Dtegra="false" -Dvc4="false" \
            -Detnaviv="false" -Dcairo-tests="false" -Dvalgrind="false" \
            -Dfreedreno-kgsl="false" -Dinstall-test-programs="false" \
            -Dudev="true" "$@"
}

# mesa-21.2.3
# NOTE: 
#  1. Need to replace `SYS_kcmp` with `__NR_kcmp` in "src/util/os_file.c",
#  until a new newer glic-installation patches "/usr/include/bits/syscall.h".
#  2. Circular dependency with libvdpau, libva, etc. - install this yet again.
cfg_mesa() {
    chk_meson
    chk_meson_build
    mkdir -p build && cd build && \
        "${MESON}" --prefix="${PREFIX}" --sysconfdir="/etc" \
            --buildtype=release --default-library=shared --strip \
            -Dplatforms="x11" -Degl-native-platform="drm" -Ddri="true" \
            -Ddri3="true" -Dglx="dri" -Ddri-drivers="nouveau" \
            -Dgallium-drivers="nouveau" \
            -Dgallium-vdpau="true" -Dgallium-xvmc="true" -Dgallium-va="true" \
            -Dvulkan-drivers="" -Dshared-glapi="true" -Dgles1="true" \
            -Dgles2="true" -Dopengl="true" -Degl="true" -Dllvm="false" \
            -Dselinux="false" -Dtools="nouveau,xvmc" -Dglx-direct="true" \
            -Dsse2="false" -Dvalgrind="false" -Dlibunwind="disabled" \
            -Dbuild-tests="false"
}

# mrxvt-0.5.4
#
# NOTE:
#   1. This is *deliberately* a minimal and light on features build because
#   that is the whole point of using mrxvt instead of more "modern" terminal-
#   emulators. For example, we disable Xft because we only care about the
#   bitmap-font "console8x16" from the old Konsole terminal in KDE 3.5.
#   2. Add the entries from "share/etc/rxvt.termcap" to "/etc/termcap".
#   3. Run "sudo tic share/etc/rxvt.terminfo" and "sudo tic
#   share/etc/mrxvt.terminfo" to install terminfo-entries specific to mrxvt.
cfg_mrxvt() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" --sysconfdir="/etc" \
        --disable-debug --disable-dependency-tracking --enable-256colors \
        --enable-rxvt-scroll --disable-next-scroll --disable-xterm-scroll \
        --disable-plain-scroll --disable-sgi-scroll --disable-menubar \
        --disable-transparency --disable-xpm --disable-jpeg --disable-png \
        --disable-xft --disable-greek --disable-cjk --disable-text-shadow \
        --disable-xrender --with-term="rxvt-256color" "$@")
}

# ncurses-6.2
cfg_ncurses() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --without-ada --enable-pc-files \
        --with-shared --with-normal --with-cxx-shared --enable-database \
        --enable-termcap --enable-sp-funcs --enable-ext-colors \
        --enable-ext-mouse --with-term-driver --enable-ext-putwin \
        --enable-tcap-names --without-libtool --with-manpage-tbl \
        --disable-home-terminfo --enable-symlinks --enable-getcap \
        --disable-rpath-hack "$@")
}

# python-3.8.12
cfg_python3() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --enable-shared --enable-optimizations \
        --disable-ipv6 --with-system-expat --without-system-ffi \
        --with-ensurepip="upgrade" "$@")
}

# libsdl-2.0.16
cfg_sdl2() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --enable-shared --disable-static \
        --enable-assertions="disabled" --enable-ssemath --disable-mmx \
        --disable-3dnow --enable-sse --disable-sse2 --disable-sse3 \
        --disable-oss --enable-alsa --disable-jack --disable-esd \
        --disable-pulseaudio --disable-video-kmsdrm --disable-video-wayland \
        --enable-video-opengl --disable-video-opengles --disable-video-vulkan \
        "$@")
}

# vim-8.2.3582
#
# NOTE:
#   1. We directly compile in the checked-out Git-repository.
#   2. The major-minor versions for Vim are in "src/version.h", while the
#   patch-level is in "included_patches" in "src/version.c".
#   3. The following creates a text-oriented (i.e. no GUI or mouse-support)
#   light-weight build of Vim.
#   4. Edit "src/feature.h" as needed.
#   5. Do not forget to clean up the check-out after installation.
cfg_vim() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-gui --disable-gpm --disable-xsmp \
        --disable-selinux --disable-nls --disable-xim --without-x \
        --without-gnome --with-features="big" --with-compiledby="${USER}" "$@")
}

# xine-lib-1.2.11
#
# NOTE:
#   1. Install ffmpeg, FAAD, etc. first.
#   2. Make sure XvMC is enabled and configured (via "/etc/X11/XvMCConfig"):
#        http://solar.gmu.edu/meetings/cdaw/data/cdaw1/xine/share/doc/xine/README_xxmc.html
cfg_xine_lib() {
    chk_configure
    XINE_PREFIX="/opt/mm"
    export CFLAGS="-march=pentium3 -msse -fomit-frame-pointer -pipe -g0"
    export CFLAGS="${CFLAGS} -O3 -I\"${XINE_PREFIX}/include\""
    export CC="gcc ${CFLAGS}"
    export CPPFLAGS="${CFLAGS}"
    export CXX="g++ ${CPPFLAGS}"
    export LDFLAGS="-L\"${XINE_PREFIX}/lib\""
    export PKG_CONFIG_PATH="${XINE_PREFIX}/lib/pkgconfig:/usr/lib/pkgconfig"
    # Get from http://www.mplayerhq.hu/MPlayer/releases/codecs/
    W32CODECS="/usr/local/w32codecs"
    (set -x; "${SOURCE}/configure" --prefix="${XINE_PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --disable-profiling --disable-debug --disable-nls --disable-asan \
        --disable-iconvtest --disable-ipv6 --disable-wayland --disable-aalib \
        --with-dav1d --disable-dvd --disable-vcd --enable-vpx \
        --enable-optimizations --disable-vdpau --disable-vaapi \
        --with-alsa --disable-oss --without-esound \
        --with-freetype --with-fontconfig --enable-antialiasing \
        --with-xcb --without-sdl --enable-xvmc --with-xv-path="/usr/lib" \
        --with-xvmc-path="/usr/lib" --with-xvmc-lib="XvMCW" \
        --with-xxmc-path="/usr/lib" --with-xxmc-lib="XvMCW" \
        --enable-w32dll --with-w32-path="${W32CODECS}" \
        --enable-real-codecs --with-real-codecs-path="${W32CODECS}" "$@")
}

# xine-ui-0.99.12
cfg_xine_ui() {
    chk_configure
    XINE_PREFIX="/opt/mm"
    export PATH="${XINE_PREFIX}/bin:${PATH}"
    export CFLAGS="-march=pentium3 -msse -pipe -g0 -I\"${XINE_PREFIX}/include\""
    export CC="gcc ${CFLAGS}"
    export CPPFLAGS="${CFLAGS}"
    export CXX="g++ ${CPPFLAGS}"
    export LDFLAGS="-L\"${XINE_PREFIX}/lib\""
    export PKG_CONFIG_PATH="${XINE_PREFIX}/lib/pkgconfig:/usr/lib/pkgconfig"
    (set -x; "${SOURCE}/configure" --prefix="${XINE_PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-debug --disable-nls --enable-xft \
        "$@")
}

# xorg-server-1.20.13
#
# NOTE: Just install xorgproto instead of the separate fooproto, barproto, etc.
cfg_xorg_server() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --with-xkb-output="/var/lib/xkb" --with-log-dir="/var/log" \
        --enable-xv --enable-xvmc --enable-pciaccess --disable-ipv6 \
        --enable-dri --enable-dri2 --enable-dri3 --enable-libdrm \
        --enable-local-transport --enable-unix-transport \
        --disable-xselinux --enable-vgahw --enable-vbe \
        --enable-config-udev --enable-config-udev-kms --disable-config-hal \
        --enable-linux-acpi --disable-suid-wrapper --enable-install-setuid \
        --enable-xfree86-utils --enable-glamor --enable-xorg \
        --disable-xwayland --disable-xvfb --disable-xnest --disable-xquartz \
        --without-systemd-daemon --disable-systemd-logind --disable-docs \
        --disable-unit-tests --disable-debug "$@")
}

# xorg-server-1.12.4
#
# NOTE: The last version of the Xorg server compatible with the proprietary
# Nvidia Linux 32-bit driver v96.43.23.
#
# NOTE:
#   1. Apply the patch from:
#        http://lists.busybox.net/pipermail/buildroot/2015-June/130276.html
#      using:
#        patch -p1 -b -z .orig -i ../xsrv112gcc5.patch
#      to get this to compiler with GCC v5+.
#   2. This assumes OpenGL headers as defined by Khronos/Mesa. Be sure to
#      install the legacy Nvidia driver with "--no-opengl-headers" or repair
#      the damage later by replacing the folowing headers with those from Mesa:
#        /usr/include/GL/gl.h
#        /usr/include/GL/glext.h
#        /usr/include/GL/glx.h
#        /usr/include/GL/glxext.h
cfg_xorg_server_legacy() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --disable-static --enable-shared \
        --with-xkb-output="/var/lib/xkb" --with-log-dir="/var/log" \
        --enable-xaa --enable-pciaccess --disable-ipv6 --disable-xselinux \
        --enable-dri --enable-dri2 --enable-libdrm --enable-install-setuid \
        --enable-local-transport --enable-unix-transport \
        --enable-config-udev --disable-config-dbus --disable-config-hal \
        --enable-xorg --disable-dmx --disable-xvfb --disable-xnest \
        --disable-xquartz --enable-xv --enable-xvmc --disable-debug \
        --enable-install-libxf86config --enable-xfree86-utils \
        --disable-docs --disable-devel-docs --disable-unit-tests "$@")
}

# xterm-369
cfg_xterm() {
    chk_configure
    (set -x; "${SOURCE}/configure" --prefix="${PREFIX}" \
        --sysconfdir="${SYSCONF}" --with-x --enable-256-color \
        --enable-freetype --with-app-defaults="/etc/X11/app-defaults" "$@")
}

#
# Main script.
#

while getopts ":c:n:p:s:" o; do
    case "${o}" in
        c)
            SYSCONF="${OPTARG}"
            ;;
        n)
            NAME="${OPTARG}"
            ;;
        p)
            PREFIX="${OPTARG}"
            ;;
        s)
            SOURCE="${OPTARG}"
            ;;
        *)
            usage
            ;;
    esac
done
shift "$((OPTIND - 1))"

case "${NAME}" in
    binutils)
        cfg_binutils "$@"
        ;;
    cairo)
        cfg_cairo "$@"
        ;;
    dbus)
        cfg_dbus "$@"
        ;;
    freetype)
        cfg_freetype "$@"
        ;;
    ffmpeg)
        cfg_ffmpeg "$@"
        ;;
    gcc)
        cfg_gcc "$@"
        ;;
    gcc_legacy)
        cfg_gcc_legacy "$@"
        ;;
    generic_autotools)
        cfg_generic_autotools "$@"
        ;;
    generic_cmake)
        cfg_generic_cmake "$@"
        ;;
    generic_meson)
        cfg_generic_meson "$@"
        ;;
    git)
        cfg_git "$@"
        ;;
    glibc)
        cfg_glibc "$@"
        ;;
    glibc_legacy)
        cfg_glibc_legacy "$@"
        ;;
    go)
        cfg_go "$@"
        ;;
    harfbuzz)
        cfg_harfbuzz "$@"
        ;;
    libdrm)
        cfg_libdrm "$@"
        ;;
    mesa)
        cfg_mesa "$@"
        ;;
    mrxvt)
        cfg_mrxvt "$@"
        ;;
    ncurses)
        cfg_ncurses "$@"
        ;;
    python3)
        cfg_python3 "$@"
        ;;
    sdl2)
        cfg_sdl2 "$@"
        ;;
    vim)
        cfg_vim "$@"
        ;;
    xine_lib)
        cfg_xine_lib "$@"
        ;;
    xine_ui)
        cfg_xine_ui "$@"
        ;;
    xorg_server)
        cfg_xorg_server "$@"
        ;;
    xorg_server_legacy)
        cfg_xorg_server_legacy "$@"
        ;;
    xterm)
        cfg_xterm "$@"
        ;;
    *)
        echo "ERROR: Unknown package-name \"${NAME}\"."
        exit 1
        ;;
esac
